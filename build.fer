let io = import('std/io');
let os = import('std/os');
let sys = import('std/sys');
let vec = import('std/vec');
let cmake = import('std/cmakeGen');

let builder = cmake.new('archive');

# get libarchive prefix using homebrew if using macos
let extPrefix = '';
if os.name == 'macos' {
	let brew = os.findExec('brew');
	if brew.empty() {
		io.cprintln('{y}error{0}: could not find \'brew\' in $PATH{0}');
		sys.exit(1);
	}
	let out = vec.new();
	let res = os.exec(brew + ' --prefix libarchive 2>/dev/null', out);
	if res != 0 || out.empty() {
		io.cprintln('{y}error{0}: brew failed in giving any relevant output');
		sys.exit(1);
	}
	extPrefix = out[0];
}

# requires the C libarchive library
let libarchiveDep = builder.addDep('archive');
libarchiveDep.makeReqd();
libarchiveDep.addPathSuffixes('archive');
if !extPrefix.empty() { libarchiveDep.addExtPrefix(extPrefix); }

# requires feral bytebuffer type
let bytebufferDep = builder.addDep('BytebufferType');
bytebufferDep.makeReqd().makeFeralLib();
bytebufferDep.addPathSuffixes('std');

let archiveType = builder.addSharedLib('ArchiveType');
archiveType.addDep(libarchiveDep);

let archiveLib = builder.addSharedLib('Archive');
archiveLib.addDep(libarchiveDep).addDep(bytebufferDep).addDep(archiveType);

builder.gen();